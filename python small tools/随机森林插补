## 转为float64  准备填充
data_1 = data_1.apply(lambda x:x.astype("float64"))

to_fill_columns = data_1.isnull().sum(axis=0)[data_1.isnull().sum(axis=0).values !=0].index.tolist()

col_num_fill = data_1[col_num].isnull().sum(axis=0)[data_1[col_num].isnull().sum(axis=0).values !=0].index.tolist()      ## 连续变量
sortindex = [data_1.columns.get_loc(i) for i in col_num_fill]

col_obj_fill = data_1[col_obj].isnull().sum(axis=0)[data_1[col_obj].isnull().sum(axis=0).values !=0].index.tolist()       ## 分类变量
sortindex_obj = [data_1.columns.get_loc(i) for i in col_obj_fill]

data_1.reset_index(drop=True,inplace=True)  #重新设置行索引

from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestRegressor
for i in sortindex:
    #print(i)
    
    #构建我们的新特征矩阵和新标签
    df = data_1
    fillc = df.iloc[:,i]
    df = df.iloc[:,pd.Series(df.columns).index != i]
    #df = pd.concat([df.iloc[:,df.columns != i],pd.DataFrame(y_full)],axis=1)
    
    #在新特征矩阵中，对含有缺失值的列，进行0的填补
    df_0 =SimpleImputer(missing_values=np.nan,
            strategy='constant',fill_value=0).fit_transform(df)
    
    #找出我们的训练集和测试集
    Ytrain = fillc[fillc.notnull()]
    Ytest = fillc[fillc.isnull()]         
    Xtrain = df_0[Ytrain.index,:]
    Xtest = df_0[Ytest.index,:]
        
    #用随机森林回归来填补缺失值
    rfc = RandomForestRegressor(n_estimators=100)
    rfc = rfc.fit(Xtrain, Ytrain)   
    Ypredict = rfc.predict(Xtest)
    #将填补好的特征返回到我们的原始的特征矩阵中
    data_1.loc[data_1.iloc[:,i].isnull(),data_1.iloc[:,i].name] = Ypredict
    
    %%time
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier
for i in sortindex_obj:
    #print(i)
    
    #构建我们的新特征矩阵和新标签
    df = data_1
    fillc = df.iloc[:,i]
    df = df.iloc[:,pd.Series(df.columns).index != i]
    #df = pd.concat([df.iloc[:,df.columns != i],pd.DataFrame(y_full)],axis=1)
    
    #在新特征矩阵中，对含有缺失值的列，进行0的填补
    df_0 =SimpleImputer(missing_values=np.nan,
            strategy='constant',fill_value=0).fit_transform(df)
    
    #找出我们的训练集和测试集
    Ytrain = fillc[fillc.notnull()]
    Ytest = fillc[fillc.isnull()]         
    Xtrain = df_0[Ytrain.index,:]
    Xtest = df_0[Ytest.index,:]
        
    #用随机森林回归来填补缺失值
    rfc = RandomForestClassifier(n_estimators=100)
    rfc = rfc.fit(Xtrain, Ytrain)   
    Ypredict = rfc.predict(Xtest)
    #将填补好的特征返回到我们的原始的特征矩阵中
    data_1.loc[data_1.iloc[:,i].isnull(),data_1.iloc[:,i].name] = Ypredict
